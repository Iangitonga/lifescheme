{"version":3,"sources":["utils/network.js","constants/constants.js","components/ModalLauncherBtn.js","components/FormMessageBar.js","components/TaskStatusCheckbox.js","components/TaskTableRow.js","components/TaskForm.js","components/TaskFormModal.js","components/TaskUpdateForm.js","components/TaskUpdateFormModal.js","components/TaskTable.js","App.js","reportWebVitals.js","index.js"],"names":["post","endpoint","data","successCbc","errorCbc","failureCbc","postSendCbc","formDataEncoded","FormData","key","append","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","hasOwnProperty","fetch","method","headers","body","mode","then","response","status","json","jsonResponse","console","log","catch","error","ENDPOINTS","UNEXPECTED_ERROR_MESSAGE","ModalLauncherBtn","className","onClick","this","props","clickCbc","React","Component","FormMessageBar","messageIsShown","messageIsSuccess","messageIsError","message","TaskStatusCheckbox","uncheckedP","checkedP","type","taskStatusUpdateCbc","xmlns","checked","width","height","viewBox","d","TaskTableRow","state","taskDropdownShown","windowClickHandler","bind","showTaskDropdown","hideTaskDropdown","launchTaskUpdateModal","window","addEventListener","removeEventListener","event","target","classList","contains","taskId","setState","taskUpdateModalLaunchCbc","taskDeleteModalLaunchCbc","startTime","endTime","completed","desc","focusable","launchTaskDeleteModal","TaskForm","formIsActive","formMessageIsShown","formMessageIsSuccess","formMessageIsError","formMessage","startTimeVal","endTimeVal","taskDescVal","startTimeErrMsg","endTimeErrMsg","taskDescErrMsg","handleStartTimeChange","handleEndTimeChange","handleTaskChange","submitForm","clearFormErrors","showFormSpinner","hideFormSpinner","handleFormSubmissionSuccess","handleFormSubmissionFormErrors","handleFormSubmissionFailure","showFormMessage","hideFormMessageBar","value","preventDefault","start_time","end_time","task_desc","task_id","newDataCbc","formErrors","isSuccess","action","onSubmit","title","closerCallback","id","onChange","required","submitBtnText","TaskFormModal","clickHandler","closerCbc","isOpened","TaskUpdateForm","initialStartTimeVal","initialEndTimeVal","initialTaskDescVal","TaskUpdateFormModal","TaskTable","tasks","tasksAreLoaded","tasksLoadingFailed","taskCreateFormModalIsOpen","taskUpdateFormModalIsOpen","taskUpdateFormDisplay","messageIsOpen","taskUpdateFormModalData","isCreated","isShown","taskDeleteFormModalData","taskName","addNewTask","launcherClickCbc","closeTaskFormModal","updateExistingTask","updateTaskStatus","getTaskIdx","displayMessage","closeTaskDeleteFormModal","_invertTaskStatus","failure","TASKS","task1","task2","newTask","taskStartTime","taskEndTime","taskDesc","newTasks","sort","taskSortCompareFn","idx","targetTask","splice","push","failureCallback","setTimeout","formData","handleTaskDeleteFormSuccess","handleTaskDeleteFormFailure","colSpan","style","textAlign","map","task","_closeTaskUpdateFormModal","_updateExistingTask","closeTaskDeleteFormModalCbc","submitTaskDeleteForm","fontSize","fontWeight","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.916afeb9.chunk.js","sourcesContent":["\r\n/**\r\n * Retrieves a cookie from @name if it is found else `null` is returned.\r\n * */\r\nconst getCookie = (name) => {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        const cookies = document.cookie.split(';');\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n};\r\n\r\n\r\n/**\r\n * Sends a POST request using the given data to the given endpoint.\r\n * @param endpoint string a url to send the request to.\r\n *\r\n *\r\n * @param data an object containing the payload to be sent to the\r\n * endpoint.\r\n *\r\n * @param successCbc an optional function that accepts one argument to be\r\n * called with the response data when the response status is 200.\r\n *\r\n * @param errorCbc an optional function that accepts one argument to be called\r\n * with the response data when the response status is 400 and the response data\r\n * contains form errors.\r\n *\r\n * @param failureCbc an optional function that accepts no argument to be called\r\n * when the response status is not 200 and the response data contain no form\r\n * errors.\r\n *\r\n * @param postSendCbc an optional function that accepts no arguments to be\r\n * called after the data has been sent and response received. This callback\r\n * will be called before any other callbacks.\r\n *\r\n * @return null.\r\n * */\r\nconst post = (endpoint, data, successCbc, errorCbc, failureCbc, postSendCbc) => {\r\n    // Prepare the data to be sent.\r\n    const formDataEncoded = new FormData();\r\n    formDataEncoded.append('csrfmiddlewaretoken', getCookie('csrftoken'));\r\n    for (const key in data) {\r\n        if (!data.hasOwnProperty(key)) {continue;}\r\n        formDataEncoded.append(key, data[key]);\r\n    }\r\n\r\n    fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n            'X-Requested-With': 'XMLHttpRequest',\r\n        },\r\n        body: formDataEncoded,\r\n        mode: 'no-cors',\r\n    })\r\n    .then((response) => {\r\n        if (postSendCbc)\r\n            postSendCbc();\r\n        if (response.status === 200) {\r\n            response.json().then((jsonResponse) => {\r\n                if (successCbc)\r\n                    successCbc(jsonResponse);\r\n            });\r\n        }\r\n        else {\r\n            response.json().then(jsonResponse => {\r\n                if (response.status === 400 && jsonResponse['FORM_ERRORS']) {\r\n                    if (errorCbc)\r\n                        errorCbc(jsonResponse['FORM_ERRORS']);\r\n                } else {\r\n                    console.log(`Error: ${jsonResponse}`);\r\n                    if (failureCbc)\r\n                        failureCbc();\r\n                }\r\n            }).catch((error) => {\r\n                console.log(`Error: ${error}`);\r\n                if (failureCbc)\r\n                    failureCbc();\r\n            });\r\n        }\r\n    })\r\n    .catch((error) => {\r\n        if (postSendCbc)\r\n            postSendCbc();\r\n        console.log(`Error: ${error}`);\r\n        if (failureCbc)\r\n            failureCbc();\r\n    });\r\n};\r\n\r\n\r\nexport default post;\r\n","\r\nexport const ENDPOINTS = {\r\n    'TASK_CREATE_ENDPOINT': '/api/create-task',\r\n    'TASK_UPDATE_ENDPOINT': '/api/update-task',\r\n    'TASK_DELETE_ENDPOINT': '/api/delete-task',\r\n    'TASK_STATUS_UPDATE_ENDPOINT': '/api/update-task-status',\r\n    'TASKS_LIST_ENDPOINT': '/api/tasks',\r\n};\r\n\r\nexport const UNEXPECTED_ERROR_MESSAGE = 'An unexpected error occurred. Please try again.';\r\n","import React from \"react\";\r\n\r\n\r\nexport default class ModalLauncherBtn extends React.Component {\r\n    render() {\r\n        return <button className='btn' onClick={this.props.clickCbc}>Create new task</button>;\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport default class FormMessageBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={`\r\n                form__msg-wrapper\r\n                ${this.props.messageIsShown ? 'form__msg-wrapper--shown ' : ''}\r\n                ${this.props.messageIsSuccess ? 'form__msg-wrapper--success ' : ''}\r\n                ${this.props.messageIsError ? 'form__msg-wrapper--error' : ''}\r\n            `}>\r\n                <div>\r\n                    <span>{this.props.message}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\n\r\nexport default class TaskStatusCheckbox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.uncheckedP = 'M5 2c-1.654 0-3 1.346-3 3v14c0 1.654 1.346 3 3 3h14c1.654 0 3-1.346 3-3v-14c0-1.654-1.346-3-3-3h-14zm19 3v14c0 2.761-2.238 5-5 5h-14c-2.762 0-5-2.239-5-5v-14c0-2.761 2.238-5 5-5h14c2.762 0 5 2.239 5 5z';\r\n        this.checkedP = 'M19 0h-14c-2.762 0-5 2.239-5 5v14c0 2.761 2.238 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-8.959 17l-4.5-4.319 1.395-1.435 3.08 2.937 7.021-7.183 1.422 1.409-8.418 8.591z';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                className=\"task-status-link\"\r\n                type=\"submit\"\r\n                onClick={this.props.taskStatusUpdateCbc}>\r\n                <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    className={`task-status-link__checkbox-svg\r\n                        ${this.props.checked ? 'task-status-link__checkbox-svg--checked' : ''}\r\n                    `}\r\n                    width=\"20\" height=\"22\" viewBox=\"0 0 24 24\">\r\n                    <path d={this.props.checked ? this.checkedP : this.uncheckedP}/>\r\n                </svg>\r\n            </button>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport TaskStatusCheckbox from \"./TaskStatusCheckbox\";\r\n\r\n\r\nexport default class TaskTableRow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            taskDropdownShown: false,\r\n        };\r\n        this.windowClickHandler = this.windowClickHandler.bind(this);\r\n        this.showTaskDropdown = this.showTaskDropdown.bind(this);\r\n        this.hideTaskDropdown = this.hideTaskDropdown.bind(this);\r\n        this.taskStatusUpdateCbc = this.taskStatusUpdateCbc.bind(this);\r\n        this.launchTaskUpdateModal = this.launchTaskUpdateModal.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('click', this.windowClickHandler);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('click', this.windowClickHandler);\r\n    }\r\n\r\n    windowClickHandler(event) {\r\n        if (!event.target.classList.contains('js-task-dropdown-launcher'))\r\n                this.hideTaskDropdown();\r\n    }\r\n\r\n    taskStatusUpdateCbc() {\r\n        this.props.taskStatusUpdateCbc(this.props.taskId);\r\n    }\r\n\r\n    showTaskDropdown() {\r\n        this.setState({\r\n            taskDropdownShown: true,\r\n        });\r\n    }\r\n\r\n    hideTaskDropdown() {\r\n        this.setState({\r\n            taskDropdownShown: false,\r\n        });\r\n    }\r\n\r\n    launchTaskUpdateModal() {\r\n        this.hideTaskDropdown();\r\n        this.props.taskUpdateModalLaunchCbc(this.props.taskId);\r\n    }\r\n\r\n    launchTaskDeleteModal() {\r\n        this.hideTaskDropdown();\r\n        this.props.taskDeleteModalLaunchCbc(this.props.taskId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr className=\"table__row\">\r\n                <td className=\"table__cell table__cell--time\">{`${this.props.startTime} - ${this.props.endTime}`}</td>\r\n                <td\r\n                    className={`table__cell table__cell--task ${this.props.completed ? 'table__cell--task--completed' : ''}`}>\r\n                    {this.props.desc}\r\n                </td>\r\n                <td className=\"table__cell table__cell--status\">\r\n                    <TaskStatusCheckbox checked={this.props.completed} taskStatusUpdateCbc={this.taskStatusUpdateCbc}/>\r\n                    <div className=\"task-dropdown\">\r\n                        <button\r\n                            className=\"task-dropdown__launcher js-task-dropdown-launcher\"\r\n                                onClick={this.showTaskDropdown}>\r\n                            <svg className=\"task-dropdown__svg\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\"\r\n                                 viewBox=\"-1 -2 25 25\" height=\"30px\" width=\"30px\">\r\n                                <path d=\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/>\r\n                            </svg>\r\n                        </button>\r\n                        <div className={` task-dropdown__content ${this.state.taskDropdownShown ? 'task-dropdown__content--shown' : ''}`}>\r\n                            <button className=\"task-dropdown__btn\" onClick={this.launchTaskUpdateModal}>\r\n                                Edit\r\n                            </button>\r\n                            <button className=\"task-dropdown__btn\" onClick={this.launchTaskDeleteModal.bind(this)}>\r\n                                Delete\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport FormMessageBar from \"./FormMessageBar\";\r\nimport post from \"../utils/network\";\r\n\r\n\r\nexport default class TaskForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.endpoint = props.endpoint;\r\n        this.state = {\r\n            formIsActive: true,\r\n            formMessageIsShown: false,\r\n            formMessageIsSuccess: false,\r\n            formMessageIsError: false,\r\n            formMessage: '',\r\n            startTimeVal: '',\r\n            endTimeVal: '',\r\n            taskDescVal: '',\r\n            startTimeErrMsg: '',\r\n            endTimeErrMsg: '',\r\n            taskDescErrMsg: '',\r\n        };\r\n        this.handleStartTimeChange = this.handleStartTimeChange.bind(this);\r\n        this.handleEndTimeChange = this.handleEndTimeChange.bind(this);\r\n        this.handleTaskChange = this.handleTaskChange.bind(this);\r\n        this.submitForm = this.submitForm.bind(this);\r\n        this.clearFormErrors = this.clearFormErrors.bind(this);\r\n        this.showFormSpinner = this.showFormSpinner.bind(this);\r\n        this.hideFormSpinner = this.hideFormSpinner.bind(this);\r\n        this.handleFormSubmissionSuccess = this.handleFormSubmissionSuccess.bind(this);\r\n        this.handleFormSubmissionFormErrors = this.handleFormSubmissionFormErrors.bind(this);\r\n        this.handleFormSubmissionFailure = this.handleFormSubmissionFailure.bind(this);\r\n        this.showFormMessage = this.showFormMessage.bind(this);\r\n        this.hideFormMessageBar = this.hideFormMessageBar.bind(this);\r\n    }\r\n\r\n    handleStartTimeChange(event) {\r\n        this.setState({startTimeVal: event.target.value});\r\n    }\r\n\r\n    handleEndTimeChange(event) {\r\n        this.setState({endTimeVal: event.target.value});\r\n    }\r\n\r\n    handleTaskChange(event) {\r\n        this.setState({taskDescVal: event.target.value});\r\n    }\r\n\r\n    submitForm(event) {\r\n        event.preventDefault();\r\n        this.hideFormMessageBar();\r\n        this.clearFormErrors();\r\n        this.showFormSpinner();\r\n        const data = {\r\n            start_time: this.state.startTimeVal,\r\n            end_time: this.state.endTimeVal,\r\n            task_desc: this.state.taskDescVal,\r\n            task_id: this.props.taskId,\r\n        };\r\n        post(\r\n            this.endpoint,\r\n            data,\r\n            this.handleFormSubmissionSuccess,\r\n            this.handleFormSubmissionFormErrors,\r\n            this.handleFormSubmissionFailure,\r\n            this.hideFormSpinner,\r\n        );\r\n    }\r\n\r\n    clearFormErrors() {\r\n        this.setState({\r\n            startTimeErrMsg: '',\r\n            endTimeErrMsg: '',\r\n            taskDescErrMsg: '',\r\n        });\r\n    }\r\n\r\n    showFormSpinner() {\r\n        this.setState({\r\n            formIsActive: false,\r\n        });\r\n    }\r\n\r\n    hideFormSpinner() {\r\n        this.setState({\r\n            formIsActive: true,\r\n        });\r\n    }\r\n\r\n    handleFormSubmissionSuccess(data) {\r\n        this.props.newDataCbc(data);\r\n        this.setState({\r\n            startTimeVal: '',\r\n            endTimeVal: '',\r\n            taskDescVal: '',\r\n        });\r\n    }\r\n\r\n    handleFormSubmissionFormErrors(formErrors) {\r\n        for (const key in formErrors) {\r\n            if (!formErrors.hasOwnProperty(key)) {continue;}\r\n            let error = '';\r\n            for (let i = 0; i < formErrors[key].length; i++) {\r\n                error += formErrors[key][i];\r\n            }\r\n            if (key === 'start_time')\r\n                this.setState({'startTimeErrMsg': error});\r\n            else if (key === 'end_time')\r\n                this.setState({'endTimeErrMsg': error});\r\n            else if (key === 'task_desc')\r\n                this.setState({'taskErrMsg': error});\r\n        }\r\n    }\r\n\r\n    handleFormSubmissionFailure() {\r\n        console.log('Failure.');\r\n        this.showFormMessage('An unexpected error occurred. Please try again.', false);\r\n    }\r\n\r\n    showFormMessage(message, isSuccess=true) {\r\n        if (isSuccess)\r\n            this.setState({\r\n                formMessageIsSuccess: true,\r\n            });\r\n        else\r\n            this.setState({\r\n                formMessageIsError: true,\r\n            });\r\n        this.setState({\r\n            formMessageIsShown: true,\r\n            formMessage: message,\r\n        });\r\n    }\r\n\r\n    hideFormMessageBar() {\r\n        this.setState({\r\n            formMessageIsSuccess: false,\r\n            formMessageIsError: false,\r\n            formMessageIsShown: false,\r\n            formMessage: '',\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form action={this.endpoint} method=\"POST\" onSubmit={this.submitForm}\r\n                  className={`form  ${this.state.formIsActive ? '' : 'form--inactive'}`}>\r\n                <header className=\"form__header js-form-header\">\r\n                    <h3 className=\"form__heading\">{this.props.title}</h3>\r\n                    <span\r\n                        className=\"modal__close\"\r\n                        onClick={this.props.closerCallback}>\r\n                        &times;\r\n                    </span>\r\n                </header>\r\n                <FormMessageBar\r\n                    message={this.state.formMessage}\r\n                    messageIsShown={this.state.formMessageIsShown}\r\n                    messageIsSuccess={this.state.formMessageIsSuccess}\r\n                    messageIsError={this.state.formMessageIsError}\r\n                />\r\n                <div className=\"form__body\">\r\n                    <div className=\"form__input-group\">\r\n                        <label className=\"form__input-label\">Start time</label>\r\n                        <input\r\n                            className={`form__input ${this.state.startTimeErrMsg ? 'form__input--error ' : ''}`}\r\n                            id=\"id_start_time\"\r\n                            onChange={this.handleStartTimeChange}\r\n                            required\r\n                            type=\"time\"\r\n                            value={this.state.startTimeVal}\r\n                        />\r\n                        <div className=\"form__input-error-wrapper\">\r\n                            <small>{this.state.startTimeErrMsg}</small>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form__input-group\">\r\n                        <label className=\"form__input-label\">End time</label>\r\n                        <input id=\"id_end_time\" type=\"time\"\r\n                               className={`form__input ${this.state.endTimeErrMsg ? 'form__input--error ' : ''}`}\r\n                               value={this.state.endTimeVal}\r\n                               onChange={this.handleEndTimeChange} required/>\r\n                        <div className=\"form__input-error-wrapper\">\r\n                            <small>{this.state.endTimeErrMsg}</small>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form__input-group\">\r\n                        <label className=\"form__input-label\">Task</label>\r\n                        <input id=\"id_task\" type=\"text\"\r\n                               className={`form__input ${this.state.taskDescErrMsg ? 'form__input--error ' : ''}`}\r\n                               value={this.state.taskDescVal}\r\n                               onChange={this.handleTaskChange} required/>\r\n                        <div className=\"form__input-error-wrapper\">\r\n                            <small>{this.state.taskDescErrMsg}</small>\r\n                        </div>\r\n                    </div>\r\n                    <button className=\"btn form__submit-btn\" type=\"submit\">{this.props.submitBtnText}</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport TaskForm from \"./TaskForm\";\r\n\r\n\r\nexport default class TaskFormModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n        this.newDataCbc = this.newDataCbc.bind(this);\r\n    }\r\n\r\n    clickHandler(event) {\r\n        if (event.target.id === this.props.id)\r\n            this.props.closerCbc();\r\n    }\r\n\r\n    newDataCbc(data) {\r\n        this.props.closerCbc();\r\n        this.props.newDataCbc(data);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={`modal ${ this.props.isOpened ? 'modal--open'  : ''}`}\r\n                 onClick={this.clickHandler} id={this.props.id}>\r\n                <div className=\"modal__body js-modal-body\">\r\n                    <TaskForm\r\n                        closerCallback={this.props.closerCbc}\r\n                        endpoint={this.props.endpoint}\r\n                        newDataCbc={this.newDataCbc}\r\n                        title={this.props.title}\r\n                        submitBtnText={this.props.submitBtnText}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import TaskForm from \"./TaskForm\";\r\n\r\n\r\nexport default class TaskUpdateForm extends TaskForm {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state.startTimeVal = props.initialStartTimeVal;\r\n        this.state.endTimeVal = props.initialEndTimeVal;\r\n        this.state.taskDescVal = props.initialTaskDescVal;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport TaskUpdateForm from \"./TaskUpdateForm\";\r\n\r\n\r\nexport default class TaskUpdateFormModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n        this.newDataCbc = this.newDataCbc.bind(this);\r\n    }\r\n\r\n    clickHandler(event) {\r\n        if (event.target.id === this.props.id)\r\n            this.props.closerCbc();\r\n    }\r\n\r\n    newDataCbc(data) {\r\n        this.props.closerCbc();\r\n        this.props.newDataCbc(data);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={`modal ${ this.props.isOpened ? 'modal--open'  : ''}`}\r\n                 onClick={this.clickHandler} id={this.props.id}>\r\n                <div className=\"modal__body js-modal-body\">\r\n                    <TaskUpdateForm\r\n                        closerCallback={this.props.closerCbc}\r\n                        endpoint={this.props.endpoint}\r\n                        initialStartTimeVal={this.props.initialStartTimeVal}\r\n                        initialEndTimeVal={this.props.initialEndTimeVal}\r\n                        initialTaskDescVal={this.props.initialTaskDescVal}\r\n                        newDataCbc={this.newDataCbc}\r\n                        taskId={this.props.taskId}\r\n                        title={this.props.title}\r\n                        submitBtnText={this.props.submitBtnText}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import post from \"../utils/network\";\r\n// TODO: import constants as *\r\nimport {ENDPOINTS, UNEXPECTED_ERROR_MESSAGE} from \"../constants/constants\";\r\nimport React from \"react\";\r\nimport ModalLauncherBtn from \"./ModalLauncherBtn\";\r\nimport FormMessageBar from \"./FormMessageBar\";\r\nimport TaskTableRow from \"./TaskTableRow\";\r\nimport TaskFormModal from \"./TaskFormModal\";\r\nimport TaskUpdateFormModal from \"./TaskUpdateFormModal\";\r\n\r\n\r\nexport default class TaskTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tasks: [],\r\n            // Used to indicate if tasks are loaded when the page is loaded/refreshed.\r\n            tasksAreLoaded: false,\r\n            tasksLoadingFailed: false,\r\n            taskCreateFormModalIsOpen: false,\r\n            taskUpdateFormModalIsOpen: false,\r\n            taskUpdateFormDisplay: false,\r\n            messageIsOpen: false,\r\n            messageIsSuccess: false,\r\n            messageIsError: false,\r\n            message: '',\r\n            taskUpdateFormModalData: {\r\n                initialStartTimeVal: '',\r\n                initialEndTimeVal: '',\r\n                initialTaskDescVal: '',\r\n                isCreated: false,\r\n                isShown: false,\r\n                taskId: '',\r\n            },\r\n            taskDeleteFormModalData: {\r\n                formIsActive: true,\r\n                formMessage: '',\r\n                formMessageIsShown: false,\r\n                formMessageIsSuccess: false,\r\n                isShown: false,\r\n                taskId: '',\r\n                taskName: '',\r\n            },\r\n        };\r\n        this.addNewTask = this.addNewTask.bind(this);\r\n        this.launcherClickCbc = this.launcherClickCbc.bind(this);\r\n        this.closeTaskFormModal = this.closeTaskFormModal.bind(this);\r\n        this.updateExistingTask = this.updateExistingTask.bind(this);\r\n        this.updateTaskStatus = this.updateTaskStatus.bind(this);\r\n        this.getTaskIdx = this.getTaskIdx.bind(this);\r\n        this.displayMessage = this.displayMessage.bind(this);\r\n        this.launchTaskUpdateModal = this.launchTaskUpdateModal.bind(this);\r\n        this.closeTaskDeleteFormModal = this.closeTaskDeleteFormModal.bind(this);\r\n        this._invertTaskStatus = this._invertTaskStatus.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const addTasks = (data) => {\r\n            // Tasks format: [{}, {}]\r\n            this.setState({\r\n                tasks: data.TASKS,\r\n                tasksAreLoaded: true,\r\n            });\r\n        };\r\n        const failure = () => {\r\n            this.displayMessage(\r\n                'An error occurred. Try reloading the page or contact the admin.',\r\n                false,\r\n            );\r\n            this.setState({\r\n                tasksAreLoaded: true,\r\n                tasksLoadingFailed: true,\r\n            });\r\n        };\r\n        post(ENDPOINTS.TASKS_LIST_ENDPOINT, {}, addTasks, failure, failure, null,)\r\n    }\r\n\r\n    taskSortCompareFn(task1, task2) {\r\n        if (task1.startTime < task2.startTime)\r\n            return -1;\r\n        else if (task1.startTime > task2.startTime)\r\n            return 1;\r\n        else return 0;\r\n    }\r\n\r\n    addNewTask(data) {\r\n        const newTask = {\r\n            id: data.taskId,\r\n            startTime: data.taskStartTime,\r\n            endTime: data.taskEndTime,\r\n            desc: data.taskDesc,\r\n            completed: false,\r\n        };\r\n        const newTasks = [...this.state.tasks, newTask];\r\n        newTasks.sort(this.taskSortCompareFn);\r\n        this.setState({\r\n            tasks: newTasks,\r\n        });\r\n    }\r\n\r\n    updateExistingTask(data) {\r\n        const idx = this.getTaskIdx(data.taskId);\r\n        if (idx !== null) {\r\n            const tasks = this.state.tasks;\r\n            const targetTask = tasks[idx];\r\n            targetTask.startTime = data.taskStartTime;\r\n            targetTask.endTime = data.taskEndTime;\r\n            targetTask.desc = data.taskDesc;\r\n            tasks[idx] = targetTask;\r\n            this.setState({\r\n                tasks: tasks,\r\n            });\r\n        } else {\r\n            this.displayMessage(UNEXPECTED_ERROR_MESSAGE, false);\r\n        }\r\n    }\r\n\r\n    launcherClickCbc() {\r\n        this.setState({\r\n            taskCreateFormModalIsOpen: true,\r\n        });\r\n    }\r\n\r\n    closeTaskFormModal() {\r\n        this.setState({\r\n            taskCreateFormModalIsOpen: false,\r\n        });\r\n    }\r\n\r\n    _invertTaskStatus(taskId) {\r\n        const idx = this.getTaskIdx(taskId);\r\n        if (idx !== null) {\r\n            const tasks = this.state.tasks;\r\n            const target = tasks.splice(idx, 1)[0];\r\n            target.completed = !target.completed;\r\n            tasks.push(target);\r\n            tasks.sort(this.taskSortCompareFn);\r\n            this.setState({\r\n                tasks: tasks,\r\n            });\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    updateTaskStatus(taskId) {\r\n        // To update a task status, we first check/uncheck the checkbox so that\r\n        // the user sees an instantaneous effect and if an error occurs later,\r\n        // we revert to the original status and display an error message.\r\n        if (!this._invertTaskStatus(taskId)) {\r\n            this.displayMessage(UNEXPECTED_ERROR_MESSAGE, false);\r\n            return;\r\n        }\r\n        const failureCallback = () => {\r\n            this._invertTaskStatus(taskId);\r\n            this.displayMessage(UNEXPECTED_ERROR_MESSAGE, false);\r\n        };\r\n        post(\r\n            ENDPOINTS.TASK_STATUS_UPDATE_ENDPOINT,\r\n            {'task_id': taskId},\r\n            null,\r\n            failureCallback,\r\n            failureCallback,\r\n            null,\r\n        );\r\n    }\r\n\r\n    displayMessage(message, messageIsSuccess = true) {\r\n        this.setState({\r\n            messageIsOpen: true,\r\n            messageIsSuccess: messageIsSuccess,\r\n            messageIsError: !messageIsSuccess,\r\n            message: message,\r\n        });\r\n        setTimeout(() => {\r\n            this.setState({\r\n                messageIsOpen: false,\r\n                messageIsSuccess: false,\r\n                messageIsError: false,\r\n                message: '',\r\n            });\r\n        }, 6000);\r\n    }\r\n\r\n    getTaskIdx(taskId) {\r\n        const tasks = this.state.tasks;\r\n        for (let i = 0; i < tasks.length; ++i) {\r\n            if (tasks[i].id === taskId)\r\n                return i;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    launchTaskDeleteModal(taskId) {\r\n        const idx = this.getTaskIdx(taskId);\r\n        if (idx !== null) {\r\n            const targetTask = this.state.tasks[idx];\r\n            const data = this.state.taskDeleteFormModalData;\r\n            data.isShown = true;\r\n            data.taskId = taskId;\r\n            data.taskName = targetTask.desc;\r\n            this.setState({\r\n                taskDeleteFormModalData: data,\r\n            });\r\n        } else {\r\n            console.log(`Error retrieving task with idx: ${idx}`);\r\n        }\r\n    }\r\n\r\n    closeTaskDeleteFormModal() {\r\n        const data = this.state.taskDeleteFormModalData;\r\n            data.isShown = false;\r\n            this.setState({\r\n                taskDeleteFormModalData: data,\r\n            });\r\n    }\r\n\r\n    closeTaskDeleteFormModalCbc(event) {\r\n        if (event.target.id === 'task-delete-modal')\r\n            this.closeTaskDeleteFormModal();\r\n    }\r\n\r\n    submitTaskDeleteForm(event) {\r\n        event.preventDefault();\r\n        const data = this.state.taskDeleteFormModalData;\r\n        data.formMessageIsShown = false;\r\n        data.formIsActive = false;\r\n        this.setState({\r\n            taskDeleteFormModalData: data,\r\n        });\r\n        const formData = {\r\n            task_id: this.state.taskDeleteFormModalData.taskId,\r\n        };\r\n        post(\r\n            ENDPOINTS.TASK_DELETE_ENDPOINT,\r\n            formData,\r\n            this.handleTaskDeleteFormSuccess.bind(this),\r\n            this.handleTaskDeleteFormFailure.bind(this),\r\n            this.handleTaskDeleteFormFailure.bind(this),\r\n            () => {\r\n                const data = this.state.taskDeleteFormModalData;\r\n                data.formIsActive = true;\r\n                this.setState({\r\n                    taskDeleteFormModalData: data,\r\n                });\r\n            },\r\n        );\r\n    }\r\n\r\n    handleTaskDeleteFormSuccess(data) {\r\n        const idx = this.getTaskIdx(data.taskId);\r\n        if (idx !== null) {\r\n            const tasks = this.state.tasks;\r\n            tasks.splice(idx, 1);\r\n            this.setState({\r\n                tasks: tasks,\r\n            });\r\n            this.closeTaskDeleteFormModal();\r\n        } else {\r\n            console.log(`Error retrieving task with idx: ${data.taskId}`);\r\n        }\r\n    }\r\n\r\n    handleTaskDeleteFormFailure() {\r\n        const data = this.state.taskDeleteFormModalData;\r\n        data.formMessage = UNEXPECTED_ERROR_MESSAGE;\r\n        data.formMessageIsSuccess = false;\r\n        data.formMessageIsShown = true;\r\n        this.setState({\r\n            taskDeleteFormModalData: data,\r\n        });\r\n    }\r\n\r\n    launchTaskUpdateModal(taskId) {\r\n        const idx = this.getTaskIdx(taskId);\r\n        if (idx !== null) {\r\n            const targetTask = this.state.tasks[idx];\r\n            const data = this.state.taskUpdateFormModalData;\r\n            data.initialStartTimeVal = targetTask.startTime;\r\n            data.initialEndTimeVal = targetTask.endTime;\r\n            data.initialTaskDescVal = targetTask.desc;\r\n            data.isCreated = true;\r\n            data.isShown = true;\r\n            data.taskId = taskId;\r\n            this.setState({\r\n                taskUpdateFormModalData: data,\r\n            });\r\n        } else {\r\n            console.log(`Error retrieving task with idx: ${idx}`);\r\n        }\r\n    }\r\n\r\n    _closeTaskUpdateFormModal() {\r\n        const data = this.state.taskUpdateFormModalData;\r\n        data.isShown = false;\r\n        data.isCreated = false;\r\n        data.taskId = '';\r\n        this.setState({\r\n            taskUpdateFormModalData: data,\r\n        });\r\n    }\r\n\r\n    _updateExistingTask(data) {\r\n        const idx = this.getTaskIdx(data.taskId);\r\n        const tasks = this.state.tasks;\r\n        const targetTask = tasks[idx];\r\n        targetTask.startTime = data.taskStartTime;\r\n        targetTask.endTime = data.taskEndTime;\r\n        targetTask.desc = data.taskDesc;\r\n        tasks[idx] = targetTask;\r\n        this.setState({\r\n            tasks: tasks,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='table-wrapper'>\r\n                <header className=\"table-wrapper__header\">\r\n                    <h1 className=\"table-wrapper__heading\">Today's Schedule</h1>\r\n                    <div className=\"table-wrapper__header-extra\">\r\n                        <ModalLauncherBtn clickCbc={this.launcherClickCbc}/>\r\n                    </div>\r\n                    <FormMessageBar message={this.state.message}\r\n                                    messageIsSuccess={this.state.messageIsSuccess}\r\n                                    messageIsError={this.state.messageIsError}\r\n                                    messageIsShown={this.state.messageIsOpen}/>\r\n                </header>\r\n                <table className=\"table\">\r\n                    <colgroup>\r\n                        <col className=\"table__col--time\"/>\r\n                        <col className=\"table__col--task\"/>\r\n                        <col className=\"table__col--status\"/>\r\n                    </colgroup>\r\n                    <thead>\r\n                    <tr className=\"table__header-row\">\r\n                        <th className=\"table__head\">Time</th>\r\n                        <th className=\"table__head table__head--task\">Task</th>\r\n                        <th className=\"table__head\">#</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    <tr className={`table__row ${this.state.tasks.length ? 'table__row--default' : ''}`}>\r\n                        <td className=\"table__cell\" colSpan={'3'} style={{textAlign: 'center'}}>\r\n                            <div className={\r\n                                `loader ${!this.state.tasksAreLoaded ? 'loader--shown' : ''}`\r\n                            }>\r\n                                Loading tasks <div className={'loader__spinner'}/>\r\n                            </div>\r\n                            <span className={`${this.state.tasksAreLoaded && !this.state.tasksLoadingFailed && !this.state.tasks.length ? '' : 'display-none'}`}>\r\n                                You have no saved tasks for today's schedule.\r\n                            </span>\r\n                        </td>\r\n                    </tr>\r\n                    {\r\n                        this.state.tasks.map((task) => {\r\n                            return <TaskTableRow\r\n                                completed={task.completed}\r\n                                desc={task.desc}\r\n                                endTime={task.endTime}\r\n                                key={task.startTime}\r\n                                taskId={task.id}\r\n                                taskStatusUpdateCbc={this.updateTaskStatus}\r\n                                taskUpdateModalLaunchCbc={this.launchTaskUpdateModal}\r\n                                taskDeleteModalLaunchCbc={this.launchTaskDeleteModal.bind(this)}\r\n                                startTime={task.startTime}/>\r\n                        })\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n                <TaskFormModal\r\n                    closerCbc={this.closeTaskFormModal}\r\n                    endpoint={ENDPOINTS.TASK_CREATE_ENDPOINT}\r\n                    id={'task-create-modal'}\r\n                    isOpened={this.state.taskCreateFormModalIsOpen}\r\n                    newDataCbc={this.addNewTask}\r\n                    title={'Create new task'}\r\n                    submitBtnText={'Create'}/>\r\n                {\r\n                    this.state.taskUpdateFormModalData.isCreated ?\r\n                        <TaskUpdateFormModal\r\n                            closerCbc={this._closeTaskUpdateFormModal.bind(this)}\r\n                            endpoint={ENDPOINTS.TASK_UPDATE_ENDPOINT}\r\n                            id={'task-update-modal'}\r\n                            isOpened={this.state.taskUpdateFormModalData.isShown}\r\n                            newDataCbc={this._updateExistingTask.bind(this)}\r\n                            taskId={this.state.taskUpdateFormModalData.taskId}\r\n                            title={'Update Task'}\r\n                            initialStartTimeVal={this.state.taskUpdateFormModalData.initialStartTimeVal}\r\n                            initialEndTimeVal={this.state.taskUpdateFormModalData.initialEndTimeVal}\r\n                            initialTaskDescVal={this.state.taskUpdateFormModalData.initialTaskDescVal}\r\n                            submitBtnText={'Update'}/>\r\n                    : null\r\n                }\r\n                <div className={`modal ${ this.state.taskDeleteFormModalData.isShown ? 'modal--open'  : ''}`}\r\n                     onClick={this.closeTaskDeleteFormModalCbc.bind(this)}\r\n                     id={'task-delete-modal'}>\r\n                    <div className=\"modal__body js-modal-body\">\r\n                        <form className={`form  ${this.state.taskDeleteFormModalData.formIsActive ? '' : 'form--inactive'}`}\r\n                              id={'task-delete-modal'}\r\n                              method=\"POST\"\r\n                              onSubmit={this.submitTaskDeleteForm.bind(this)}>\r\n                            <header className=\"form__header js-form-header\">\r\n                                <h3 className=\"form__heading\">{'Delete task'}</h3>\r\n                                <span className=\"modal__close\" onClick={this.closeTaskDeleteFormModal}>&times;</span>\r\n                            </header>\r\n                            <FormMessageBar message={this.state.taskDeleteFormModalData.formMessage}\r\n                                            messageIsShown={this.state.taskDeleteFormModalData.formMessageIsShown}\r\n                                            messageIsSuccess={this.state.taskDeleteFormModalData.formMessageIsSuccess}\r\n                                            messageIsError={!this.state.taskDeleteFormModalData.formMessageIsSuccess}/>\r\n                            <div className=\"form__body\">\r\n                                <p style={{fontSize: '1.2rem'}}>Are you sure you want to delete\r\n                                    <span style={{fontWeight: 'bold'}}>\r\n                                        {` ${this.state.taskDeleteFormModalData.taskName}`}\r\n                                    </span> task?\r\n                                </p>\r\n                                <button className=\"btn btn--red form__submit-btn\" type=\"submit\">\r\n                                    Yes, delete\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport TaskTable from \"./components/TaskTable\";\n\n\nfunction App() {\n    return (\n        <div className=\"content\">\n            <TaskTable/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}