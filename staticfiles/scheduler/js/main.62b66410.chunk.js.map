{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ENDPOINTS","UNEXPECTED_ERROR_MESSAGE","post","endpoint","data","successCbc","errorCbc","failureCbc","postSendCbc","formDataEncoded","FormData","key","append","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","hasOwnProperty","fetch","method","headers","body","mode","then","response","status","json","jsonResponse","console","log","catch","error","FormMessageBar","className","this","props","msgShown","msgSuccess","msgError","message","React","Component","TaskForm","state","formActiveStatus","formMessageShown","formMessageSuccess","formMessageError","formMessage","startTimeVal","endTimeVal","taskDescVal","startTimeErrMsg","endTimeErrMsg","taskDescErrMsg","handleStartTimeChange","bind","handleEndTimeChange","handleTaskChange","submitForm","clearFormErrors","showFormSpinner","hideFormSpinner","handleFormSubmissionSuccess","handleFormSubmissionFormErrors","handleFormSubmissionFailure","showFormMessage","hideFormMessageBar","event","setState","target","value","preventDefault","start_time","end_time","task_desc","task_id","taskId","newDataCbc","formErrors","isSuccess","action","onSubmit","title","onClick","closerCallback","id","type","onChange","required","submitBtnText","TaskUpdateForm","initialStartTimeVal","initialEndTimeVal","initialTaskDescVal","TaskUpdateFormModal","clickHandler","closerCbc","isOpened","FormModal","ModalLauncherBtn","clickCbc","TaskStatus","uncheckedP","checkedP","taskStatusUpdateCbc","xmlns","checked","width","height","viewBox","d","TaskTableRow","taskDropdownClickHandler","taskDropdownShown","launchTaskUpdateModal","taskUpdateModalLaunchCbc","taskDeleteModalLaunchCbc","startTime","endTime","desc","completed","focusable","href","launchTaskDeleteModal","TaskTable","tasks","taskCreateFormModalIsOpen","taskUpdateFormModalIsOpen","taskUpdateFormDisplay","msgIsOpen","msgIsSuccess","msgIsError","taskUpdateFormModalData","isCreated","isShown","taskDeleteFormModalData","formIsActive","formMessageIsShown","formMessageIsSuccess","taskName","addNewTask","launcherClickCbc","closeTaskFormModal","updateExistingTask","updateTaskStatus","getTaskIdx","displayMessage","closeTaskDeleteFormModal","errorMessage","TASKS","task1","task2","newTask","taskStartTime","taskEndTime","taskDesc","newTasks","sort","taskSortCompareFn","idx","targetTask","splice","push","setTimeout","formData","handleTaskDeleteFormSuccess","handleTaskDeleteFormFailure","colSpan","style","textAlign","map","task","_closeTaskUpdateFormModal","_updateExistingTask","closeTaskDeleteFormModalCbc","submitTaskDeleteForm","fontSize","fontWeight","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.62b66410.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\nimport './App.css';\n\n\nconst ENDPOINTS = {\n    'TASK_CREATE_ENDPOINT': '/api/create-task',\n    'TASK_UPDATE_ENDPOINT': '/api/update-task',\n    'TASK_DELETE_ENDPOINT': '/api/delete-task',\n    'TASK_STATUS_UPDATE_ENDPOINT': '/api/update-task-status',\n    'TASKS_LIST_ENDPOINT': '/api/tasks',\n};\n\nconst UNEXPECTED_ERROR_MESSAGE = 'An unexpected error occurred. Please try again.';\n\nconst getCookie = (name) => {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n};\n\n\n/**\n * Sends a POST request using the given data to the given endpoint.\n * @param endpoint string a url to send the request to.\n *\n *\n * @param data an object containing the payload to be sent to the\n * endpoint.\n *\n * @param successCbc a function that accepts one argument to be called with the\n * response data when the request status response is 200.\n *\n * @param errorCbc a function that accepts one argument to be called with the\n * response data when the request status response is 400 and has form errors.\n *\n * @param failureCbc a function that accepts no argument to be called when the\n * response neither is 200 nor has form errors.\n *\n * @param postSendCbc an optional function that accepts no arguments to be\n * called after the data has been sent and response received. This callback\n * will be called before any other callbacks.\n *\n * @return null.\n * */\nconst post = (endpoint, data, successCbc, errorCbc, failureCbc, postSendCbc) => {\n    // Prepare the data to be sent.\n    const formDataEncoded = new FormData();\n    formDataEncoded.append('csrfmiddlewaretoken', getCookie('csrftoken'));\n    for (const key in data) {\n        if (!data.hasOwnProperty(key)) {continue;}\n        formDataEncoded.append(key, data[key]);\n    }\n\n    fetch(endpoint, {\n        method: 'POST',\n        headers: {\n            'X-Requested-With': 'XMLHttpRequest',\n        },\n        body: formDataEncoded,\n        mode: 'no-cors',\n    })\n    .then((response) => {\n        if (postSendCbc)\n            postSendCbc();\n        if (response.status === 200) {\n            response.json().then((jsonResponse) => {\n                successCbc(jsonResponse);\n            });\n        }\n        else {\n            response.json().then(jsonResponse => {\n                if (response.status === 400 && jsonResponse['FORM_ERRORS']) {\n                    errorCbc(jsonResponse['FORM_ERRORS']);\n                } else {\n                    console.log(`Error: ${jsonResponse}`);\n                    failureCbc();\n                }\n            }).catch((error) => {\n                console.log(`Error: ${error}`);\n                failureCbc();\n            });\n        }\n    })\n    .catch((error) => {\n        postSendCbc();\n        console.log(`Error: ${error}`);\n        failureCbc();\n    });\n};\n\n\nclass FormMessageBar extends React.Component {\n    render() {\n        return (\n            <div className={\n                `form__msg-wrapper\n                 ${this.props.msgShown ? 'form__msg-wrapper--shown ' : ''}\n                 ${this.props.msgSuccess ? 'form__msg-wrapper--success ' : ''}\n                 ${this.props.msgError ? 'form__msg-wrapper--error' : ''}\n                 `}>\n                <div>\n                    <span>{this.props.message}</span>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nclass TaskForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.endpoint = props.endpoint;\n        this.state = {\n            formActiveStatus: true,\n            formMessageShown: false,\n            formMessageSuccess: false,  // Indicates whether the message bar background is green.\n            formMessageError: false,  // Indicates whether the message bar background is red.\n            formMessage: '',\n            startTimeVal: '',\n            endTimeVal: '',\n            taskDescVal: '',\n            startTimeErrMsg: '',\n            endTimeErrMsg: '',\n            taskDescErrMsg: '',\n        };\n        this.handleStartTimeChange = this.handleStartTimeChange.bind(this);\n        this.handleEndTimeChange = this.handleEndTimeChange.bind(this);\n        this.handleTaskChange = this.handleTaskChange.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.clearFormErrors = this.clearFormErrors.bind(this);\n        this.showFormSpinner = this.showFormSpinner.bind(this);\n        this.hideFormSpinner = this.hideFormSpinner.bind(this);\n        this.handleFormSubmissionSuccess = this.handleFormSubmissionSuccess.bind(this);\n        this.handleFormSubmissionFormErrors = this.handleFormSubmissionFormErrors.bind(this);\n        this.handleFormSubmissionFailure = this.handleFormSubmissionFailure.bind(this);\n        this.showFormMessage = this.showFormMessage.bind(this);\n        this.hideFormMessageBar = this.hideFormMessageBar.bind(this);\n    }\n\n    handleStartTimeChange(event) {\n        this.setState({startTimeVal: event.target.value});\n    }\n\n    handleEndTimeChange(event) {\n        this.setState({endTimeVal: event.target.value});\n    }\n\n    handleTaskChange(event) {\n        this.setState({taskDescVal: event.target.value});\n    }\n\n    submitForm(event) {\n        event.preventDefault();\n        this.hideFormMessageBar();\n        this.clearFormErrors();\n        this.showFormSpinner();\n        const data = {\n            start_time: this.state.startTimeVal,\n            end_time: this.state.endTimeVal,\n            task_desc: this.state.taskDescVal,\n            task_id: this.props.taskId,\n        };\n        post(\n            this.endpoint,\n            data,\n            this.handleFormSubmissionSuccess,\n            this.handleFormSubmissionFormErrors,\n            this.handleFormSubmissionFailure,\n            this.hideFormSpinner,\n        );\n    }\n\n    clearFormErrors() {\n        this.setState({\n            startTimeErrMsg: '',\n            endTimeErrMsg: '',\n            taskDescErrMsg: '',\n        });\n    }\n\n    showFormSpinner() {\n        this.setState({\n            formActiveStatus: false,\n        });\n    }\n\n    hideFormSpinner() {\n        this.setState({\n            formActiveStatus: true,\n        });\n    }\n\n    handleFormSubmissionSuccess(data) {\n        this.props.newDataCbc(data);\n        this.setState({\n            startTimeVal: '',\n            endTimeVal: '',\n            taskDescVal: '',\n        });\n    }\n\n    handleFormSubmissionFormErrors(formErrors) {\n        for (const key in formErrors) {\n            if (!formErrors.hasOwnProperty(key)) {continue;}\n            let error = '';\n            for (let i = 0; i < formErrors[key].length; i++) {\n                error += formErrors[key][i];\n            }\n            if (key === 'start_time')\n                this.setState({'startTimeErrMsg': error});\n            else if (key === 'end_time')\n                this.setState({'endTimeErrMsg': error});\n            else if (key === 'task_desc')\n                this.setState({'taskErrMsg': error});\n        }\n    }\n\n    handleFormSubmissionFailure() {\n        console.log('Failure.');\n        this.showFormMessage('An unexpected error occurred. Please try again.', false);\n    }\n\n    showFormMessage(message, isSuccess=true) {\n        if (isSuccess)\n            this.setState({\n                formMessageSuccess: true,\n            });\n        else\n            this.setState({\n                formMessageError: true,\n            });\n        this.setState({\n            formMessageShown: true,\n            formMessage: message,\n        });\n    }\n\n    hideFormMessageBar() {\n        this.setState({\n            formMessageSuccess: false,\n            formMessageError: false,\n            formMessageShown: false,\n            formMessage: '',\n        });\n    }\n\n    render() {\n        return (\n            <form action={this.endpoint} method=\"POST\" onSubmit={this.submitForm}\n                  className={`form  ${this.state.formActiveStatus ? '' : 'form--inactive'}`}>\n                <header className=\"form__header js-form-header\">\n                    <h3 className=\"form__heading\">{this.props.title}</h3>\n                    <span className=\"modal__close\" onClick={this.props.closerCallback}>&times;</span>\n                </header>\n                <FormMessageBar message={this.state.formMessage}\n                                msgShown={this.state.formMessageShown}\n                                msgSuccess={this.state.formMessageSuccess}\n                                msgError={this.state.formMessageError}/>\n                <div className=\"form__body\">\n                    <div className=\"form__input-group\">\n                        <label className=\"form__input-label\">Start time</label>\n                        <input id=\"id_start_time\" type=\"time\"\n                               className={`form__input ${this.state.startTimeErrMsg ? 'form__input--error ' : ''}`}\n                               value={this.state.startTimeVal}\n                               onChange={this.handleStartTimeChange} required/>\n                        <div className=\"form__input-error-wrapper\">\n                            <small>{this.state.startTimeErrMsg}</small>\n                        </div>\n                    </div>\n                    <div className=\"form__input-group\">\n                        <label className=\"form__input-label\">End time</label>\n                        <input id=\"id_end_time\" type=\"time\"\n                               className={`form__input ${this.state.endTimeErrMsg ? 'form__input--error ' : ''}`}\n                               value={this.state.endTimeVal}\n                               onChange={this.handleEndTimeChange} required/>\n                        <div className=\"form__input-error-wrapper\">\n                            <small>{this.state.endTimeErrMsg}</small>\n                        </div>\n                    </div>\n                    <div className=\"form__input-group\">\n                        <label className=\"form__input-label\">Task</label>\n                        <input id=\"id_task\" type=\"text\"\n                               className={`form__input ${this.state.taskDescErrMsg ? 'form__input--error ' : ''}`}\n                               value={this.state.taskDescVal}\n                               onChange={this.handleTaskChange} required/>\n                        <div className=\"form__input-error-wrapper\">\n                            <small>{this.state.taskDescErrMsg}</small>\n                        </div>\n                    </div>\n                    <button className=\"btn form__submit-btn\" type=\"submit\">{this.props.submitBtnText}</button>\n                </div>\n            </form>\n        );\n    }\n}\n\n\nclass TaskUpdateForm extends TaskForm {\n    constructor(props) {\n        super(props);\n        this.state.startTimeVal = props.initialStartTimeVal;\n        this.state.endTimeVal = props.initialEndTimeVal;\n        this.state.taskDescVal = props.initialTaskDescVal;\n    }\n}\n\nclass TaskUpdateFormModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.clickHandler = this.clickHandler.bind(this);\n        this.newDataCbc = this.newDataCbc.bind(this);\n    }\n\n    clickHandler(event) {\n        if (event.target.id === this.props.id)\n            this.props.closerCbc();\n    }\n\n    newDataCbc(data) {\n        this.props.closerCbc();\n        this.props.newDataCbc(data);\n    }\n\n    render() {\n        return (\n            <div className={`modal ${ this.props.isOpened ? 'modal--open'  : ''}`}\n                 onClick={this.clickHandler} id={this.props.id}>\n                <div className=\"modal__body js-modal-body\">\n                    <TaskUpdateForm\n                        closerCallback={this.props.closerCbc}\n                        endpoint={this.props.endpoint}\n                        initialStartTimeVal={this.props.initialStartTimeVal}\n                        initialEndTimeVal={this.props.initialEndTimeVal}\n                        initialTaskDescVal={this.props.initialTaskDescVal}\n                        newDataCbc={this.newDataCbc}\n                        taskId={this.props.taskId}\n                        title={this.props.title}\n                        submitBtnText={this.props.submitBtnText}/>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nclass FormModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.clickHandler = this.clickHandler.bind(this);\n        this.newDataCbc = this.newDataCbc.bind(this);\n    }\n\n    clickHandler(event) {\n        if (event.target.id === this.props.id)\n            this.props.closerCbc();\n    }\n\n    newDataCbc(data) {\n        this.props.closerCbc();\n        this.props.newDataCbc(data);\n    }\n\n    render() {\n        return (\n            <div className={`modal ${ this.props.isOpened ? 'modal--open'  : ''}`}\n                 onClick={this.clickHandler} id={this.props.id}>\n                <div className=\"modal__body js-modal-body\">\n                    <TaskForm\n                        closerCallback={this.props.closerCbc}\n                        endpoint={this.props.endpoint}\n                        newDataCbc={this.newDataCbc}\n                        title={this.props.title}\n                        submitBtnText={this.props.submitBtnText}/>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nclass ModalLauncherBtn extends React.Component {\n    render() {\n        return <button className='btn' onClick={this.props.clickCbc}>Create new task</button>;\n    }\n}\n\n\nclass TaskStatus extends React.Component {\n    constructor(props) {\n        super(props);\n        this.uncheckedP = 'M5 2c-1.654 0-3 1.346-3 3v14c0 1.654 1.346 3 3 3h14c1.654 0 3-1.346 3-3v-14c0-1.654-1.346-3-3-3h-14zm19 3v14c0 2.761-2.238 5-5 5h-14c-2.762 0-5-2.239-5-5v-14c0-2.761 2.238-5 5-5h14c2.762 0 5 2.239 5 5z';\n        this.checkedP = 'M19 0h-14c-2.762 0-5 2.239-5 5v14c0 2.761 2.238 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-8.959 17l-4.5-4.319 1.395-1.435 3.08 2.937 7.021-7.183 1.422 1.409-8.418 8.591z';\n    }\n\n    render() {\n        return (\n            <button className=\"task-status-link\" type=\"submit\" onClick={this.props.taskStatusUpdateCbc}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\"\n                    className={`task-status-link__checkbox-svg ${this.props.checked ? 'task-status-link__checkbox-svg--checked' : ''}`}\n                     width=\"20\" height=\"22\" viewBox=\"0 0 24 24\">\n                    <path d={this.props.checked ? this.checkedP : this.uncheckedP}/>\n                </svg>\n            </button>\n        );\n    }\n}\n\n\nclass TaskTableRow extends React.Component {\n    constructor(props) {\n        super(props);\n        this.taskStatusUpdateCbc = this.taskStatusUpdateCbc.bind(this);\n        this.taskDropdownClickHandler = this.taskDropdownClickHandler.bind(this);\n        this.state = {\n            taskDropdownShown: false,\n        };\n        this.launchTaskUpdateModal = this.launchTaskUpdateModal.bind(this);\n    }\n\n    taskStatusUpdateCbc() {\n        this.props.taskStatusUpdateCbc(this.props.taskId);\n    }\n\n    taskDropdownClickHandler() {\n        this.setState({\n            taskDropdownShown: true,\n        });\n    }\n\n    launchTaskUpdateModal() {\n        this.setState({\n            taskDropdownShown: false,\n        });\n        this.props.taskUpdateModalLaunchCbc(this.props.taskId);\n    }\n\n    launchTaskDeleteModal() {\n        this.setState({\n            taskDropdownShown: false,\n        });\n        this.props.taskDeleteModalLaunchCbc(this.props.taskId);\n    }\n\n    render() {\n        return (\n            <tr className=\"table__row\">\n                <td className=\"table__cell table__cell--time\">{`${this.props.startTime} - ${this.props.endTime}`}</td>\n                <td className=\"table__cell table__cell--task\">{this.props.desc}</td>\n                <td className=\"table__cell table__cell--status\">\n                    <TaskStatus checked={this.props.completed} taskStatusUpdateCbc={this.taskStatusUpdateCbc}/>\n                    <div className=\"task-dropdown\">\n                        <button className=\"task-dropdown__launcher\" onClick={this.taskDropdownClickHandler}>\n                            <svg className=\"task-dropdown__svg\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\"\n                                 viewBox=\"-1 -2 25 25\" height=\"30px\" width=\"30px\">\n                                <path d=\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/>\n                            </svg>\n                        </button>\n                        <div className={`task-dropdown__content ${this.state.taskDropdownShown ? 'task-dropdown__content--shown' : ''}`}>\n                            {/* TODO: change from links to buttons */}\n                            {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n                            <a className=\"task-dropdown__link\" href=\"#\" onClick={this.launchTaskUpdateModal}>\n                                Edit\n                            </a>\n                            {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n                            <a className=\"task-dropdown__link\" href=\"#\"\n                               onClick={this.launchTaskDeleteModal.bind(this)}>\n                                Delete\n                            </a>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n        );\n    }\n}\n\n\nclass TaskTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: [\n            ],\n            taskCreateFormModalIsOpen: false,\n            taskUpdateFormModalIsOpen: false,\n            taskUpdateFormDisplay: false,\n            msgIsOpen: false,\n            msgIsSuccess: false,\n            msgIsError: false,\n            message: '',\n            taskUpdateFormModalData: {\n                initialStartTimeVal: '',\n                initialEndTimeVal: '',\n                initialTaskDescVal: '',\n                isCreated: false,\n                isShown: false,\n                taskId: '',\n            },\n            taskDeleteFormModalData: {\n                formIsActive: true,\n                formMessage: '',\n                formMessageIsShown: false,\n                formMessageIsSuccess: false,\n                isShown: false,\n                taskId: '',\n                taskName: '',\n            }\n        };\n        this.addNewTask = this.addNewTask.bind(this);\n        this.launcherClickCbc = this.launcherClickCbc.bind(this);\n        this.closeTaskFormModal = this.closeTaskFormModal.bind(this);\n        this.updateExistingTask = this.updateExistingTask.bind(this);\n        this.updateTaskStatus = this.updateTaskStatus.bind(this);\n        this.getTaskIdx = this.getTaskIdx.bind(this);\n        this.displayMessage = this.displayMessage.bind(this);\n        this.launchTaskUpdateModal = this.launchTaskUpdateModal.bind(this);\n        this.closeTaskDeleteFormModal = this.closeTaskDeleteFormModal.bind(this);\n    }\n\n    componentDidMount() {\n        const addTasks = (data) => {\n            // TASKS: [{}, {}]\n            this.setState({\n                tasks: data.TASKS,\n            });\n        };\n        const errorMessage = 'An unexpected error occurred.';\n        post(\n            ENDPOINTS.TASKS_LIST_ENDPOINT,\n            {},\n            addTasks,\n            () => {this.displayMessage(errorMessage, false)},\n            () => {this.displayMessage(errorMessage, false)},\n            () => {},\n        )\n    }\n\n    taskSortCompareFn(task1, task2) {\n        if (task1.startTime < task2.startTime)\n            return -1;\n        else if (task1.startTime > task2.startTime)\n            return 1;\n        else return 0;\n    }\n\n    addNewTask(data) {\n        const newTask = {\n            id: data.taskId,\n            startTime: data.taskStartTime,\n            endTime: data.taskEndTime,\n            desc: data.taskDesc,\n            completed: false,\n        };\n        const newTasks = [...this.state.tasks, newTask];\n        newTasks.sort(this.taskSortCompareFn);\n        this.setState({\n            tasks: newTasks,\n        });\n    }\n\n    updateExistingTask(data) {\n        const idx = this.getTaskIdx(data.taskId);\n        if (idx !== null) {\n            const tasks = this.state.tasks;\n            const targetTask = tasks[idx];\n            console.log(targetTask);\n            targetTask.startTime = data.taskStartTime;\n            targetTask.endTime = data.taskEndTime;\n            targetTask.desc = data.taskDesc;\n            tasks[idx] = targetTask;\n            this.setState({\n                tasks: tasks,\n            });\n        } else {\n            this.displayMessage(UNEXPECTED_ERROR_MESSAGE, false);\n        }\n    }\n\n    launcherClickCbc() {\n        this.setState({\n            taskCreateFormModalIsOpen: true,\n        });\n    }\n\n    closeTaskFormModal() {\n        this.setState({\n            taskCreateFormModalIsOpen: false,\n        });\n    }\n\n    updateTaskStatus(taskId) {\n        const successCallback = () => {\n            console.log(`TASKS: ${this.state.tasks[0]}`);\n            const idx = this.getTaskIdx(taskId);\n            if (idx !== null) {\n                const tasks = this.state.tasks;\n                const target = tasks.splice(idx, 1)[0];\n                target.completed = !target.completed;\n                tasks.push(target);\n                tasks.sort(this.taskSortCompareFn);\n                this.setState({\n                    tasks: tasks,\n                });\n            } else {\n                this.displayMessage(UNEXPECTED_ERROR_MESSAGE, false);\n            }\n        };\n        post(\n            ENDPOINTS.TASK_STATUS_UPDATE_ENDPOINT,\n            {'task_id': taskId},\n            successCallback,\n            () => {this.displayMessage(UNEXPECTED_ERROR_MESSAGE, false);},\n            () => {this.displayMessage(UNEXPECTED_ERROR_MESSAGE, false);},\n            () => {},\n        );\n    }\n\n    displayMessage(message, msgIsSuccess = true) {\n        this.setState({\n            msgIsOpen: true,\n            msgIsSuccess: msgIsSuccess,\n            msgIsError: !msgIsSuccess,\n            message: message,\n        });\n        setTimeout(() => {\n            this.setState({\n                msgIsOpen: false,\n                msgIsSuccess: false,\n                msgIsError: false,\n                message: '',\n            });\n        }, 3000);\n    }\n\n    getTaskIdx(taskId) {\n        const tasks = this.state.tasks;\n        for (let i = 0; i < tasks.length; ++i) {\n            if (tasks[i].id === taskId)\n                return i;\n        }\n        return null;\n    }\n\n    launchTaskDeleteModal(taskId) {\n        const idx = this.getTaskIdx(taskId);\n        if (idx !== null) {\n            const targetTask = this.state.tasks[idx];\n            const data = this.state.taskDeleteFormModalData;\n            data.isShown = true;\n            data.taskId = taskId;\n            data.taskName = targetTask.desc;\n            this.setState({\n                taskDeleteFormModalData: data,\n            });\n        } else {\n            console.log(`Error retrieving task with idx: ${idx}`);\n        }\n    }\n\n    closeTaskDeleteFormModal() {\n        const data = this.state.taskDeleteFormModalData;\n            data.isShown = false;\n            this.setState({\n                taskDeleteFormModalData: data,\n            });\n    }\n\n    closeTaskDeleteFormModalCbc(event) {\n        if (event.target.id === 'task-delete-modal')\n            this.closeTaskDeleteFormModal();\n    }\n\n    submitTaskDeleteForm(event) {\n        event.preventDefault();\n        const data = this.state.taskDeleteFormModalData;\n        data.formMessageIsShown = false;\n        data.formIsActive = false;\n        this.setState({\n            taskDeleteFormModalData: data,\n        });\n        const formData = {\n            task_id: this.state.taskDeleteFormModalData.taskId,\n        };\n        post(\n            ENDPOINTS.TASK_DELETE_ENDPOINT,\n            formData,\n            this.handleTaskDeleteFormSuccess.bind(this),\n            this.handleTaskDeleteFormFailure.bind(this),\n            this.handleTaskDeleteFormFailure.bind(this),\n            () => {\n                const data = this.state.taskDeleteFormModalData;\n                data.formIsActive = true;\n                this.setState({\n                    taskDeleteFormModalData: data,\n                });\n            },\n        );\n    }\n\n    handleTaskDeleteFormSuccess(data) {\n        const idx = this.getTaskIdx(data.taskId);\n        if (idx !== null) {\n            const tasks = this.state.tasks;\n            tasks.splice(idx, 1);\n            this.setState({\n                tasks: tasks,\n            });\n            this.closeTaskDeleteFormModal();\n        } else {\n            console.log(`Error retrieving task with idx: ${data.taskId}`);\n        }\n    }\n\n    handleTaskDeleteFormFailure() {\n        const data = this.state.taskDeleteFormModalData;\n        data.formMessage = UNEXPECTED_ERROR_MESSAGE;\n        data.formMessageIsSuccess = false;\n        data.formMessageIsShown = true;\n        this.setState({\n            taskDeleteFormModalData: data,\n        });\n    }\n\n    launchTaskUpdateModal(taskId) {\n        const idx = this.getTaskIdx(taskId);\n        if (idx !== null) {\n            const targetTask = this.state.tasks[idx];\n            const data = this.state.taskUpdateFormModalData;\n            data.initialStartTimeVal = targetTask.startTime;\n            data.initialEndTimeVal = targetTask.endTime;\n            data.initialTaskDescVal = targetTask.desc;\n            data.isCreated = true;\n            data.isShown = true;\n            data.taskId = taskId;\n            this.setState({\n                taskUpdateFormModalData: data,\n            });\n        } else {\n            console.log(`Error retrieving task with idx: ${idx}`);\n        }\n    }\n\n    _closeTaskUpdateFormModal() {\n        const data = this.state.taskUpdateFormModalData;\n        data.isShown = false;\n        data.isCreated = false;\n        data.taskId = '';\n        this.setState({\n            taskUpdateFormModalData: data,\n        });\n    }\n\n    _updateExistingTask(data) {\n        const idx = this.getTaskIdx(data.taskId);\n        const tasks = this.state.tasks;\n        const targetTask = tasks[idx];\n        targetTask.startTime = data.taskStartTime;\n        targetTask.endTime = data.taskEndTime;\n        targetTask.desc = data.taskDesc;\n        tasks[idx] = targetTask;\n        this.setState({\n            tasks: tasks,\n        });\n    }\n\n    render() {\n        return (\n            <div className='table-wrapper'>\n                <header className=\"table-wrapper__header\">\n                    <h1 className=\"table-wrapper__heading\">Today's Schedule</h1>\n                    <div className=\"table-wrapper__header-extra\">\n                        <ModalLauncherBtn clickCbc={this.launcherClickCbc}/>\n                    </div>\n                    <FormMessageBar message={this.state.message}\n                                    msgSuccess={this.state.msgIsSuccess}\n                                    msgError={this.state.msgIsError}\n                                    msgShown={this.state.msgIsOpen}/>\n                </header>\n                <table className=\"table\">\n                    <colgroup>\n                        <col className=\"table__col--time\"/>\n                        <col className=\"table__col--task\"/>\n                        <col className=\"table__col--status\"/>\n                    </colgroup>\n                    <thead>\n                    <tr className=\"table__header-row\">\n                        <th className=\"table__head\">Time</th>\n                        <th className=\"table__head table__head--task\">Task</th>\n                        <th className=\"table__head\">#</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr className={`table__row ${this.state.tasks.length ? 'table__row--default' : ''}`}>\n                        <td className=\"table__cell\" colSpan={'3'} style={{textAlign: 'center'}}>\n                            {\"You have no saved tasks for today's schedule\"}\n                        </td>\n                    </tr>\n                    {\n                        this.state.tasks.map((task) => {\n                            return <TaskTableRow\n                                completed={task.completed}\n                                desc={task.desc}\n                                endTime={task.endTime}\n                                taskId={task.id}\n                                taskStatusUpdateCbc={this.updateTaskStatus}\n                                taskUpdateModalLaunchCbc={this.launchTaskUpdateModal}\n                                taskDeleteModalLaunchCbc={this.launchTaskDeleteModal.bind(this)}\n                                startTime={task.startTime}/>\n                        })\n                    }\n                    </tbody>\n                </table>\n                <FormModal\n                    closerCbc={this.closeTaskFormModal}\n                    endpoint={ENDPOINTS.TASK_CREATE_ENDPOINT}\n                    id={'task-create-modal'}\n                    isOpened={this.state.taskCreateFormModalIsOpen}\n                    newDataCbc={this.addNewTask}\n                    title={'Create new task'}\n                    submitBtnText={'Create'}/>\n                {\n                    this.state.taskUpdateFormModalData.isCreated ?\n                        <TaskUpdateFormModal\n                            closerCbc={this._closeTaskUpdateFormModal.bind(this)}\n                            endpoint={ENDPOINTS.TASK_UPDATE_ENDPOINT}\n                            id={'task-update-modal'}\n                            isOpened={this.state.taskUpdateFormModalData.isShown}\n                            newDataCbc={this._updateExistingTask.bind(this)}\n                            taskId={this.state.taskUpdateFormModalData.taskId}\n                            title={'Update Task'}\n                            initialStartTimeVal={this.state.taskUpdateFormModalData.initialStartTimeVal}\n                            initialEndTimeVal={this.state.taskUpdateFormModalData.initialEndTimeVal}\n                            initialTaskDescVal={this.state.taskUpdateFormModalData.initialTaskDescVal}\n                            submitBtnText={'Update'}/>\n                    : null\n                }\n                <div className={`modal ${ this.state.taskDeleteFormModalData.isShown ? 'modal--open'  : ''}`}\n                     onClick={this.closeTaskDeleteFormModalCbc.bind(this)}\n                     id={'task-delete-modal'}>\n                    <div className=\"modal__body js-modal-body\">\n                        <form className={`form  ${this.state.taskDeleteFormModalData.formIsActive ? '' : 'form--inactive'}`}\n                              id={'task-delete-modal'}\n                              method=\"POST\"\n                              onSubmit={this.submitTaskDeleteForm.bind(this)}>\n                            <header className=\"form__header js-form-header\">\n                                <h3 className=\"form__heading\">{'Delete task'}</h3>\n                                <span className=\"modal__close\" onClick={this.closeTaskDeleteFormModal}>&times;</span>\n                            </header>\n                            <FormMessageBar message={this.state.taskDeleteFormModalData.formMessage}\n                                            msgShown={this.state.taskDeleteFormModalData.formMessageIsShown}\n                                            msgSuccess={this.state.taskDeleteFormModalData.formMessageIsSuccess}\n                                            msgError={!this.state.taskDeleteFormModalData.formMessageIsSuccess}/>\n                            <div className=\"form__body\">\n                                <p style={{fontSize: '1.2rem'}}>Are you sure you want to delete\n                                    <span style={{fontWeight: 'bold'}}>\n                                        {` ${this.state.taskDeleteFormModalData.taskName}`}\n                                    </span> task?\n                                </p>\n                                <button className=\"btn btn--red form__submit-btn\" type=\"submit\">\n                                    Yes, delete\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction App() {\n  return (\n    <Fragment>\n        {/*<div className=\"main-container\">*/}\n            <TaskTable/>\n        {/*</div>*/}\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}